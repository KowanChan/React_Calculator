{"ast":null,"code":"// Simulated Backend for calculations\nexport function evaluate(calc) {\n  // Solve a problem recursively\n\n  /* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n  This means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\n  const ops = [\"+\", \"-\", \"/\", \"*\"];\n  const nums = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"];\n  const split = [];\n  console.log(calc);\n  let i = 0;\n  let curr = \"\";\n\n  while (calc.charAt(i) != \"\") {\n    if (nums.includes(calc.charAt(i))) {\n      curr += calc.charAt(i);\n    } else if (ops.includes(calc.charAt(i))) {\n      split.push(curr);\n      curr = \"\";\n      split.push(calc.charAt(i));\n    } else if (calc.charAt(i) === \"(\") {\n      console.log(calc.slice(i));\n    } else if (calc.charAt(i) === \")\") i++;\n  }\n\n  split.push(curr);\n  console.log(split);\n  return split;\n}","map":{"version":3,"sources":["C:/Users/Kowan/ReactProjects/calculator/src/backend2.js"],"names":["evaluate","calc","ops","nums","split","console","log","i","curr","charAt","includes","push","slice"],"mappings":"AAAA;AACA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAuB;AAC7B;;AAEA;AACD;AACC,QAAMC,GAAG,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,CAAZ;AACA,QAAMC,IAAI,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,CAAb;AAEA,QAAMC,KAAK,GAAG,EAAd;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAEA,MAAIM,CAAC,GAAG,CAAR;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,SAAMP,IAAI,CAACQ,MAAL,CAAYF,CAAZ,KAAkB,EAAxB,EAA2B;AAC1B,QAAIJ,IAAI,CAACO,QAAL,CAAcT,IAAI,CAACQ,MAAL,CAAYF,CAAZ,CAAd,CAAJ,EAAmC;AAClCC,MAAAA,IAAI,IAAIP,IAAI,CAACQ,MAAL,CAAYF,CAAZ,CAAR;AACA,KAFD,MAIK,IAAIL,GAAG,CAACQ,QAAJ,CAAaT,IAAI,CAACQ,MAAL,CAAYF,CAAZ,CAAb,CAAJ,EAAkC;AACtCH,MAAAA,KAAK,CAACO,IAAN,CAAWH,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACAJ,MAAAA,KAAK,CAACO,IAAN,CAAWV,IAAI,CAACQ,MAAL,CAAYF,CAAZ,CAAX;AACA,KAJI,MAMA,IAAIN,IAAI,CAACQ,MAAL,CAAYF,CAAZ,MAAmB,GAAvB,EAA4B;AAChCF,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACW,KAAL,CAAWL,CAAX,CAAZ;AAEA,KAHI,MAKA,IAAIN,IAAI,CAACQ,MAAL,CAAYF,CAAZ,MAAmB,GAAvB,EACLA,CAAC;AACD;;AAEDH,EAAAA,KAAK,CAACO,IAAN,CAAWH,IAAX;AAEAH,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAOA,KAAP;AACA","sourcesContent":["// Simulated Backend for calculations\r\nexport function evaluate(calc){\r\n\t// Solve a problem recursively\r\n\r\n\t/* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n\tThis means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\r\n\tconst ops = [\"+\",\"-\",\"/\",\"*\"];\r\n\tconst nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"];\r\n\r\n\tconst split = [];\r\n\r\n\tconsole.log(calc);\r\n\r\n\tlet i = 0;\r\n\tlet curr = \"\";\r\n\twhile(calc.charAt(i) != \"\"){\r\n\t\tif (nums.includes(calc.charAt(i))) {\r\n\t\t\tcurr += calc.charAt(i);\r\n\t\t}\r\n\r\n\t\telse if (ops.includes(calc.charAt(i))) {\r\n\t\t\tsplit.push(curr);\r\n\t\t\tcurr = \"\";\r\n\t\t\tsplit.push(calc.charAt(i));\r\n\t\t}\r\n\r\n\t\telse if (calc.charAt(i) === \"(\") {\r\n\t\t\tconsole.log(calc.slice(i));\r\n\r\n\t\t}\r\n\t\t\r\n\t\telse if (calc.charAt(i) === \")\")\r\n\t\ti++;\r\n\t}\r\n\r\n\tsplit.push(curr);\r\n\r\n\tconsole.log(split);\r\n\treturn split;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}