{"ast":null,"code":"// Simulated Backend for calculations\nexport function evaluate(calc) {\n  // Solve a problem recursively\n\n  /* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n  This means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\n  const ops = [\"(\", \")\", \"+\", \"-\", \"/\", \"*\"];\n  const nums = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"];\n\n  function splitIntoArray() {\n    const split = [];\n    let i = 0;\n    let curr = \"\";\n\n    while (calc.charAt(i) != \"\") {\n      if (nums.includes(calc.charAt(i))) {\n        curr += calc.charAt(i);\n      } else if (ops.includes(calc.charAt(i))) {\n        split.push(curr);\n        curr = \"\";\n        split.push(calc.charAt(i));\n      } else if (calc.charAt(i) === \"(\") {\n        split.push(evaluate(calc.slice(i + 1)));\n      } else if (calc.charAt(i) === \")\") {\n        break;\n      }\n\n      i += num;\n      num = 1;\n      console.log(calc + \" \" + i);\n    }\n\n    split.push(curr);\n    console.log(split);\n    return split;\n  }\n}","map":{"version":3,"sources":["C:/Users/Kowan/ReactProjects/calculator/src/backend2.js"],"names":["evaluate","calc","ops","nums","splitIntoArray","split","i","curr","charAt","includes","push","slice","num","console","log"],"mappings":"AAAA;AACA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAuB;AAC7B;;AAEA;AACD;AACC,QAAMC,GAAG,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,CAAZ;AACA,QAAMC,IAAI,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,CAAb;;AAEA,WAASC,cAAT,GAAyB;AACxB,UAAMC,KAAK,GAAG,EAAd;AAEA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,IAAI,GAAG,EAAX;;AACA,WAAMN,IAAI,CAACO,MAAL,CAAYF,CAAZ,KAAkB,EAAxB,EAA2B;AAC1B,UAAIH,IAAI,CAACM,QAAL,CAAcR,IAAI,CAACO,MAAL,CAAYF,CAAZ,CAAd,CAAJ,EAAmC;AAClCC,QAAAA,IAAI,IAAIN,IAAI,CAACO,MAAL,CAAYF,CAAZ,CAAR;AACA,OAFD,MAIK,IAAIJ,GAAG,CAACO,QAAJ,CAAaR,IAAI,CAACO,MAAL,CAAYF,CAAZ,CAAb,CAAJ,EAAkC;AACtCD,QAAAA,KAAK,CAACK,IAAN,CAAWH,IAAX;AACAA,QAAAA,IAAI,GAAG,EAAP;AACAF,QAAAA,KAAK,CAACK,IAAN,CAAWT,IAAI,CAACO,MAAL,CAAYF,CAAZ,CAAX;AACA,OAJI,MAMA,IAAIL,IAAI,CAACO,MAAL,CAAYF,CAAZ,MAAmB,GAAvB,EAA4B;AAChCD,QAAAA,KAAK,CAACK,IAAN,CAAWV,QAAQ,CAACC,IAAI,CAACU,KAAL,CAAWL,CAAC,GAAC,CAAb,CAAD,CAAnB;AACA,OAFI,MAIA,IAAIL,IAAI,CAACO,MAAL,CAAYF,CAAZ,MAAmB,GAAvB,EAA2B;AAC/B;AACA;;AACDA,MAAAA,CAAC,IAAGM,GAAJ;AACAA,MAAAA,GAAG,GAAG,CAAN;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYb,IAAI,GAAG,GAAP,GAAYK,CAAxB;AACA;;AAEDD,IAAAA,KAAK,CAACK,IAAN,CAAWH,IAAX;AAEAM,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACA,WAAOA,KAAP;AACA;AACD","sourcesContent":["// Simulated Backend for calculations\r\nexport function evaluate(calc){\r\n\t// Solve a problem recursively\r\n\r\n\t/* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n\tThis means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\r\n\tconst ops = [\"(\",\")\",\"+\",\"-\",\"/\",\"*\"];\r\n\tconst nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"];\r\n\r\n\tfunction splitIntoArray(){\r\n\t\tconst split = [];\r\n\r\n\t\tlet i = 0;\r\n\t\tlet curr = \"\";\r\n\t\twhile(calc.charAt(i) != \"\"){\r\n\t\t\tif (nums.includes(calc.charAt(i))) {\r\n\t\t\t\tcurr += calc.charAt(i);\r\n\t\t\t}\r\n\r\n\t\t\telse if (ops.includes(calc.charAt(i))) {\r\n\t\t\t\tsplit.push(curr);\r\n\t\t\t\tcurr = \"\";\r\n\t\t\t\tsplit.push(calc.charAt(i));\r\n\t\t\t}\r\n\r\n\t\t\telse if (calc.charAt(i) === \"(\") {\r\n\t\t\t\tsplit.push(evaluate(calc.slice(i+1)));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\telse if (calc.charAt(i) === \")\"){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\ti+= num;\r\n\t\t\tnum = 1;\r\n\t\t\tconsole.log(calc + \" \" +i);\r\n\t\t}\r\n\r\n\t\tsplit.push(curr);\r\n\r\n\t\tconsole.log(split);\r\n\t\treturn split;\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}