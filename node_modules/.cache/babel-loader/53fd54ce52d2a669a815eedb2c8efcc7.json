{"ast":null,"code":"// Simulated Backend for calculations\nexport function evaluate(calc) {\n  const ops = [\"+\", \"-\", \"/\", \"*\"];\n  const nums = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"];\n\n  function splitIntoArray(calc) {\n    const temp = [];\n    let i = 0;\n    let curr = \"\";\n\n    while (calc.charAt(i) != \"\") {\n      if (ops.includes(calc.charAt(i))) {\n        temp.push(curr);\n        curr = \"\";\n        temp.push(calc.charAt(i));\n      } else if (nums.includes(calc.charAt(i))) {\n        curr += calc.charAt(i);\n      }\n\n      i++;\n    }\n\n    temp.push(curr);\n    return temp;\n  }\n\n  function divMult(arrayList) {\n    const temp = [];\n\n    for (let x = 0; x < arrayList.length; x++) {\n      if (arrayList[x] == \"/\") {\n        temp.push(\"+\");\n        temp.push(parseFloat(arrayList[x - 1]) / parseFloat(arrayList[x + 1]));\n      } else if (arrayList[x] == \"*\") {\n        temp.push(\"+\");\n        temp.push(parseFloat(arrayList[x - 1]) * parseFloat(arrayList[x + 1]));\n      } else {\n        temp.push(arrayList[x]);\n      }\n    }\n\n    return temp;\n  }\n\n  function addSub(arrayList) {\n    let total = parseFloat(arrayList[0]);\n\n    for (let x = 1; x < arrayList.length; x += 2) {\n      if (arrayList[x] == \"+\") {\n        total += parseFloat(arrayList[x + 1]);\n      } else if (arrayList[x] == \"-\") {\n        total -= parseFloat(arrayList[x + 1]);\n      }\n    }\n\n    return total;\n  }\n\n  function solve(arrayList) {\n    let final = splitIntoArray(calc);\n    let finalNum = 0;\n    console.log(final);\n    final = divMult(final);\n    finalNum = addSub(final);\n    console.log(finalNum);\n    return finalNum;\n  }\n\n  return solve(calc);\n}","map":{"version":3,"sources":["C:/Users/Kowan/ReactProjects/calculator/src/backend2.js"],"names":["evaluate","calc","ops","nums","splitIntoArray","temp","i","curr","charAt","includes","push","divMult","arrayList","x","length","parseFloat","addSub","total","solve","final","finalNum","console","log"],"mappings":"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","sourcesContent":["// Simulated Backend for calculations\r\nexport function evaluate(calc){\r\n\tconst ops = [\"+\",\"-\",\"/\",\"*\"];\r\n\tconst nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"];\r\n\r\n\tfunction splitIntoArray(calc){\r\n\t\tconst temp = [];\r\n\r\n\t\tlet i = 0;\r\n\t\tlet curr = \"\";\r\n\r\n\t\twhile(calc.charAt(i) != \"\"){\r\n\t\t\tif (ops.includes(calc.charAt(i))) {\r\n\t\t\t\ttemp.push(curr);\r\n\t\t\t\tcurr=\"\";\r\n\t\t\t\ttemp.push(calc.charAt(i));\r\n\t\t\t}\r\n\r\n\t\t\telse if (nums.includes(calc.charAt(i))){\r\n\t\t\t\tcurr+=calc.charAt(i);\r\n\t\t\t}\r\n\t\t\ti++;\r\n\t\t}\r\n\r\n\t\ttemp.push(curr);\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tfunction divMult(arrayList){\r\n\t\tconst temp = [];\r\n\r\n\t\tfor (let x = 0; x < arrayList.length; x++) {\r\n\t\t\tif(arrayList[x] == \"/\"){\r\n\t\t\t\ttemp.push(\"+\");\r\n\t\t\t\ttemp.push(parseFloat(arrayList[x-1])/parseFloat(arrayList[x+1]));\r\n\t\t\t}\r\n\r\n\t\t\telse if(arrayList[x] == \"*\"){\r\n\t\t\t\ttemp.push(\"+\");\r\n\t\t\t\ttemp.push(parseFloat(arrayList[x-1])*parseFloat(arrayList[x+1]));\r\n\t\t\t}\r\n\r\n\t\t\telse{\r\n\t\t\t\ttemp.push(arrayList[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tfunction addSub(arrayList){\r\n\t\tlet total = parseFloat(arrayList[0]);\r\n\t\tfor (let x = 1; x < arrayList.length; x+=2) {\r\n\t\t\tif(arrayList[x] == \"+\"){\r\n\t\t\t\ttotal += parseFloat(arrayList[x+1]);\r\n\t\t\t}\r\n\r\n\t\t\telse if(arrayList[x] == \"-\"){\r\n\t\t\t\ttotal -= parseFloat(arrayList[x+1]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn total;\r\n\t}\r\n\tfunction solve(arrayList){\r\n\t\tlet final = splitIntoArray(calc);\r\n\t\tlet finalNum = 0;\r\n\t\tconsole.log(final);\r\n\t\tfinal = divMult(final);\r\n\t\tfinalNum = addSub(final);\r\n\t\tconsole.log(finalNum);\r\n\t\treturn finalNum;\r\n\t}\r\n\r\n\treturn solve(calc);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}