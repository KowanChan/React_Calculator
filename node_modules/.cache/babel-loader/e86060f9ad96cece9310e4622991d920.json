{"ast":null,"code":"// Simulated Backend for calculations\nexport function evaluate(calc) {\n  // Solve a problem recursively\n\n  /* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n  This means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\n  const ops = [\"(\", \")\", \"+\", \"-\", \"/\", \"*\"];\n  const nums = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"];\n\n  function splitIntoArray(calc) {\n    const split = [];\n    let i = 0;\n    let curr = \"\";\n    let num = 0;\n\n    while (calc.charAt(i) != \"\") {\n      if (nums.includes(calc.charAt(i))) {\n        curr += calc.charAt(i);\n        num++;\n      } else if (ops.includes(calc.charAt(i))) {\n        split.push(curr);\n        curr = \"\";\n        split.push(calc.charAt(i));\n        num++;\n      } else if (calc.charAt(i) === \"(\") {\n        [curr, num] = evaluate(calc.slice(i + 1));\n        i += num;\n      } else if (calc.charAt(i) === \")\") {\n        break;\n      }\n\n      i++;\n      console.log(calc);\n    }\n\n    split.push(curr);\n    console.log(split);\n    return [split, num];\n  }\n\n  splitIntoArray(calc);\n  return \"hello\";\n}","map":{"version":3,"sources":["C:/Users/Kowan/ReactProjects/calculator/src/backend2.js"],"names":["evaluate","calc","ops","nums","splitIntoArray","split","i","curr","num","charAt","includes","push","slice","console","log"],"mappings":"AAAA;AACA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAuB;AAC7B;;AAEA;AACD;AACC,QAAMC,GAAG,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,CAAZ;AACA,QAAMC,IAAI,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,CAAb;;AAEA,WAASC,cAAT,CAAwBH,IAAxB,EAA6B;AAC5B,UAAMI,KAAK,GAAG,EAAd;AAEA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,IAAI,GAAG,EAAX;AAEA,QAAIC,GAAG,GAAG,CAAV;;AACA,WAAMP,IAAI,CAACQ,MAAL,CAAYH,CAAZ,KAAkB,EAAxB,EAA2B;AAC1B,UAAIH,IAAI,CAACO,QAAL,CAAcT,IAAI,CAACQ,MAAL,CAAYH,CAAZ,CAAd,CAAJ,EAAmC;AAClCC,QAAAA,IAAI,IAAIN,IAAI,CAACQ,MAAL,CAAYH,CAAZ,CAAR;AACAE,QAAAA,GAAG;AACH,OAHD,MAKK,IAAIN,GAAG,CAACQ,QAAJ,CAAaT,IAAI,CAACQ,MAAL,CAAYH,CAAZ,CAAb,CAAJ,EAAkC;AACtCD,QAAAA,KAAK,CAACM,IAAN,CAAWJ,IAAX;AACAA,QAAAA,IAAI,GAAG,EAAP;AACAF,QAAAA,KAAK,CAACM,IAAN,CAAWV,IAAI,CAACQ,MAAL,CAAYH,CAAZ,CAAX;AACAE,QAAAA,GAAG;AACH,OALI,MAOA,IAAIP,IAAI,CAACQ,MAAL,CAAYH,CAAZ,MAAmB,GAAvB,EAA4B;AAChC,SAACC,IAAD,EAAOC,GAAP,IAAcR,QAAQ,CAACC,IAAI,CAACW,KAAL,CAAWN,CAAC,GAAC,CAAb,CAAD,CAAtB;AACAA,QAAAA,CAAC,IAAEE,GAAH;AACA,OAHI,MAKA,IAAIP,IAAI,CAACQ,MAAL,CAAYH,CAAZ,MAAmB,GAAvB,EAA2B;AAC/B;AACA;;AAEDA,MAAAA,CAAC;AACDO,MAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACA;;AACDI,IAAAA,KAAK,CAACM,IAAN,CAAWJ,IAAX;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACA,WAAO,CAACA,KAAD,EAAQG,GAAR,CAAP;AACA;;AAEDJ,EAAAA,cAAc,CAACH,IAAD,CAAd;AACA,SAAO,OAAP;AACA","sourcesContent":["// Simulated Backend for calculations\r\nexport function evaluate(calc){\r\n\t// Solve a problem recursively\r\n\r\n\t/* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n\tThis means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\r\n\tconst ops = [\"(\",\")\",\"+\",\"-\",\"/\",\"*\"];\r\n\tconst nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"];\r\n\r\n\tfunction splitIntoArray(calc){\r\n\t\tconst split = [];\r\n\r\n\t\tlet i = 0;\r\n\t\tlet curr = \"\";\r\n\r\n\t\tlet num = 0;\r\n\t\twhile(calc.charAt(i) != \"\"){\r\n\t\t\tif (nums.includes(calc.charAt(i))) {\r\n\t\t\t\tcurr += calc.charAt(i);\r\n\t\t\t\tnum++;\r\n\t\t\t}\r\n\r\n\t\t\telse if (ops.includes(calc.charAt(i))) {\r\n\t\t\t\tsplit.push(curr);\r\n\t\t\t\tcurr = \"\";\r\n\t\t\t\tsplit.push(calc.charAt(i));\r\n\t\t\t\tnum++;\r\n\t\t\t}\r\n\r\n\t\t\telse if (calc.charAt(i) === \"(\") {\r\n\t\t\t\t[curr, num] = evaluate(calc.slice(i+1));\r\n\t\t\t\ti+=num;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\telse if (calc.charAt(i) === \")\"){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ti++;\r\n\t\t\tconsole.log(calc);\r\n\t\t}\r\n\t\tsplit.push(curr);\r\n\t\tconsole.log(split);\r\n\t\treturn [split, num];\r\n\t}\r\n\r\n\tsplitIntoArray(calc);\r\n\treturn \"hello\";\r\n}\r\n"]},"metadata":{},"sourceType":"module"}