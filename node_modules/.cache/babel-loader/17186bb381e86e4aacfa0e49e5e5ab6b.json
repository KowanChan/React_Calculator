{"ast":null,"code":"// Simulated Backend for calculations\nexport function evaluate(calc) {\n  // Solve a problem recursively\n\n  /* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n  This means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\n  ops = [\"+\", \"-\", \"/\", \"*\"];\n  nums = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"];\n  split = [];\n  i = 0;\n  curr = \"\";\n\n  while (calc.charAt(i) != \"\") {\n    if (nums.includes(calc.charAt(i))) {\n      curr += calc.charAt(i);\n    } else if (ops.includes(calc.charAt(i))) {}\n\n    {\n      split.push(curr);\n      curr = \"\";\n      split.push(calc.charAt(i));\n    }\n    i++;\n  }\n}","map":{"version":3,"sources":["C:/Users/Kowan/ReactProjects/calculator/src/backend2.js"],"names":["evaluate","calc","ops","nums","split","i","curr","charAt","includes","push"],"mappings":"AAAA;AACA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAuB;AAC7B;;AAEA;AACD;AACCC,EAAAA,GAAG,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,CAAN;AACAC,EAAAA,IAAI,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,CAAP;AAEAC,EAAAA,KAAK,GAAG,EAAR;AAEAC,EAAAA,CAAC,GAAG,CAAJ;AACAC,EAAAA,IAAI,GAAG,EAAP;;AACA,SAAML,IAAI,CAACM,MAAL,CAAYF,CAAZ,KAAkB,EAAxB,EAA2B;AAC1B,QAAIF,IAAI,CAACK,QAAL,CAAcP,IAAI,CAACM,MAAL,CAAYF,CAAZ,CAAd,CAAJ,EAAmC;AAClCC,MAAAA,IAAI,IAAIL,IAAI,CAACM,MAAL,CAAYF,CAAZ,CAAR;AACA,KAFD,MAIK,IAAIH,GAAG,CAACM,QAAJ,CAAaP,IAAI,CAACM,MAAL,CAAYF,CAAZ,CAAb,CAAJ,EAAkC,CAAE;;AAAA;AACxCD,MAAAA,KAAK,CAACK,IAAN,CAAWH,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACAF,MAAAA,KAAK,CAACK,IAAN,CAAWR,IAAI,CAACM,MAAL,CAAYF,CAAZ,CAAX;AACA;AAEDA,IAAAA,CAAC;AACD;AACD","sourcesContent":["// Simulated Backend for calculations\r\nexport function evaluate(calc){\r\n\t// Solve a problem recursively\r\n\r\n\t/* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n\tThis means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\r\n\tops = [\"+\",\"-\",\"/\",\"*\"];\r\n\tnums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"];\r\n\r\n\tsplit = [];\r\n\r\n\ti = 0;\r\n\tcurr = \"\";\r\n\twhile(calc.charAt(i) != \"\"){\r\n\t\tif (nums.includes(calc.charAt(i))) {\r\n\t\t\tcurr += calc.charAt(i);\r\n\t\t}\r\n\r\n\t\telse if (ops.includes(calc.charAt(i))) {}{\r\n\t\t\tsplit.push(curr);\r\n\t\t\tcurr = \"\";\r\n\t\t\tsplit.push(calc.charAt(i));\r\n\t\t}\r\n\r\n\t\ti++;\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}