{"ast":null,"code":"// Simulated Backend for calculations\nexport function evaluate(calc) {\n  // Solve a problem recursively\n\n  /* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n  This means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\n  const ops = [\"(\", \")\", \"+\", \"-\", \"/\", \"*\"];\n  const nums = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"];\n  const split = [];\n  console.log(calc);\n  let i = 0;\n  let curr = \"\";\n\n  for (const element in ops) {}\n\n  split.push(curr);\n  console.log(split);\n  return split;\n}","map":{"version":3,"sources":["C:/Users/Kowan/ReactProjects/calculator/src/backend2.js"],"names":["evaluate","calc","ops","nums","split","console","log","i","curr","element","push"],"mappings":"AAAA;AACA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAuB;AAC7B;;AAEA;AACD;AACC,QAAMC,GAAG,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,CAAZ;AACA,QAAMC,IAAI,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,CAAb;AAEA,QAAMC,KAAK,GAAG,EAAd;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAEA,MAAIM,CAAC,GAAG,CAAR;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAI,MAAMC,OAAV,IAAqBP,GAArB,EAAyB,CAExB;;AAEDE,EAAAA,KAAK,CAACM,IAAN,CAAWF,IAAX;AAEAH,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAOA,KAAP;AACA","sourcesContent":["// Simulated Backend for calculations\r\nexport function evaluate(calc){\r\n\t// Solve a problem recursively\r\n\r\n\t/* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n\tThis means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\r\n\tconst ops = [\"(\",\")\",\"+\",\"-\",\"/\",\"*\"];\r\n\tconst nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"];\r\n\r\n\tconst split = [];\r\n\r\n\tconsole.log(calc);\r\n\r\n\tlet i = 0;\r\n\tlet curr = \"\";\r\n\tfor(const element in ops){\r\n\t\t\r\n\t}\r\n\r\n\tsplit.push(curr);\r\n\r\n\tconsole.log(split);\r\n\treturn split;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}