{"ast":null,"code":"// Simulated Backend for calculations\nexport function evaluate(calc) {\n  // Solve a problem recursively\n\n  /* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n  This means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\n  const ops = [\"+\", \"-\", \"/\", \"*\"];\n  const nums = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"]; //Value i stays through recursion\n\n  let i = 0;\n\n  function splitIntoArray(calc) {\n    const temp = [];\n    let i = 0;\n    let curr = \"\";\n\n    while (calc.charAt(i) != \"\") {\n      if (ops.includes(calc.charAt(i))) {\n        temp.push(curr);\n        curr = \"\";\n        temp.push(calc.charAt(i));\n      } else if (nums.includes(calc.charAt(i))) {\n        curr += calc.charAt(i);\n      }\n\n      i++;\n    }\n\n    temp.push(curr);\n    return temp;\n  }\n\n  let yikes = splitIntoArray(calc);\n  console.log(yikes);\n  return \"temp\";\n}","map":{"version":3,"sources":["C:/Users/Kowan/ReactProjects/calculator/src/backend2.js"],"names":["evaluate","calc","ops","nums","i","splitIntoArray","temp","curr","charAt","includes","push","yikes","console","log"],"mappings":"AAAA;AACA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAuB;AAC7B;;AAEA;AACD;AACC,QAAMC,GAAG,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,CAAZ;AACA,QAAMC,IAAI,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,CAAb,CAN6B,CAQ7B;;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,WAASC,cAAT,CAAwBJ,IAAxB,EAA6B;AAC5B,UAAMK,IAAI,GAAG,EAAb;AAEA,QAAIF,CAAC,GAAG,CAAR;AACA,QAAIG,IAAI,GAAG,EAAX;;AAEA,WAAMN,IAAI,CAACO,MAAL,CAAYJ,CAAZ,KAAkB,EAAxB,EAA2B;AAC1B,UAAIF,GAAG,CAACO,QAAJ,CAAaR,IAAI,CAACO,MAAL,CAAYJ,CAAZ,CAAb,CAAJ,EAAkC;AACjCE,QAAAA,IAAI,CAACI,IAAL,CAAUH,IAAV;AACAA,QAAAA,IAAI,GAAC,EAAL;AACAD,QAAAA,IAAI,CAACI,IAAL,CAAUT,IAAI,CAACO,MAAL,CAAYJ,CAAZ,CAAV;AACA,OAJD,MAMK,IAAID,IAAI,CAACM,QAAL,CAAcR,IAAI,CAACO,MAAL,CAAYJ,CAAZ,CAAd,CAAJ,EAAkC;AACtCG,QAAAA,IAAI,IAAEN,IAAI,CAACO,MAAL,CAAYJ,CAAZ,CAAN;AACA;;AACDA,MAAAA,CAAC;AACD;;AAEDE,IAAAA,IAAI,CAACI,IAAL,CAAUH,IAAV;AACA,WAAOD,IAAP;AACA;;AAED,MAAIK,KAAK,GAAGN,cAAc,CAACJ,IAAD,CAA1B;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAO,MAAP;AACA","sourcesContent":["// Simulated Backend for calculations\r\nexport function evaluate(calc){\r\n\t// Solve a problem recursively\r\n\r\n\t/* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n\tThis means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\r\n\tconst ops = [\"+\",\"-\",\"/\",\"*\"];\r\n\tconst nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"];\r\n\r\n\t//Value i stays through recursion\r\n\tlet i = 0;\r\n\r\n\tfunction splitIntoArray(calc){\r\n\t\tconst temp = [];\r\n\r\n\t\tlet i = 0;\r\n\t\tlet curr = \"\";\r\n\r\n\t\twhile(calc.charAt(i) != \"\"){\r\n\t\t\tif (ops.includes(calc.charAt(i))) {\r\n\t\t\t\ttemp.push(curr);\r\n\t\t\t\tcurr=\"\";\r\n\t\t\t\ttemp.push(calc.charAt(i));\r\n\t\t\t}\r\n\r\n\t\t\telse if (nums.includes(calc.charAt(i))){\r\n\t\t\t\tcurr+=calc.charAt(i);\r\n\t\t\t}\r\n\t\t\ti++;\r\n\t\t}\r\n\r\n\t\ttemp.push(curr);\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tlet yikes = splitIntoArray(calc);\r\n\tconsole.log(yikes);\r\n\treturn \"temp\";\r\n}\r\n"]},"metadata":{},"sourceType":"module"}