{"ast":null,"code":"// Simulated Backend for calculations\nexport function evaluate(calc) {\n  // Solve a problem recursively\n\n  /* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n  This means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\n  const ops = [\"+\", \"-\", \"/\", \"*\"];\n  const nums = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"]; //Value i stays through recursion\n\n  let i = 0;\n\n  function splitIntoArray(calc) {\n    const temp = [];\n    let i = 0;\n    let curr = calc.charAt(0);\n\n    while (curr != \"\") {}\n  }\n\n  let yikes = splitIntoArray(calc);\n  console.log(yikes);\n  return \"temp\";\n}","map":{"version":3,"sources":["C:/Users/Kowan/ReactProjects/calculator/src/backend2.js"],"names":["evaluate","calc","ops","nums","i","splitIntoArray","temp","curr","charAt","yikes","console","log"],"mappings":"AAAA;AACA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAuB;AAC7B;;AAEA;AACD;AACC,QAAMC,GAAG,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,CAAZ;AACA,QAAMC,IAAI,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,CAAb,CAN6B,CAQ7B;;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,WAASC,cAAT,CAAwBJ,IAAxB,EAA6B;AAC5B,UAAMK,IAAI,GAAG,EAAb;AAEA,QAAIF,CAAC,GAAG,CAAR;AACA,QAAIG,IAAI,GAAGN,IAAI,CAACO,MAAL,CAAY,CAAZ,CAAX;;AAEA,WAAMD,IAAI,IAAI,EAAd,EAAiB,CAEhB;AACD;;AAED,MAAIE,KAAK,GAAGJ,cAAc,CAACJ,IAAD,CAA1B;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAO,MAAP;AACA","sourcesContent":["// Simulated Backend for calculations\r\nexport function evaluate(calc){\r\n\t// Solve a problem recursively\r\n\r\n\t/* This function will split the string given as calc into an array split by operators. If we encounter a ( weill will create a new aray.\r\n\tThis means that there will be nested arrays in split to represent nested parentheses. Call evaluate on any parenthesis. */\r\n\tconst ops = [\"+\",\"-\",\"/\",\"*\"];\r\n\tconst nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"];\r\n\r\n\t//Value i stays through recursion\r\n\tlet i = 0;\r\n\r\n\tfunction splitIntoArray(calc){\r\n\t\tconst temp = [];\r\n\r\n\t\tlet i = 0;\r\n\t\tlet curr = calc.charAt(0);\r\n\r\n\t\twhile(curr != \"\"){\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tlet yikes = splitIntoArray(calc);\r\n\tconsole.log(yikes);\r\n\treturn \"temp\";\r\n}\r\n"]},"metadata":{},"sourceType":"module"}